SKETCH version 1.7.5
Benchmark = mru4.sk
/* BEGIN PACKAGE ANONYMOUS*/
/*mru4.sk:4*/

void _main ()/*mru4.sk:4*/
{
  int[4] s0 = {1,1,1,0};
  int[4] s1 = {0,1,1,0};
  int[4] s2 = {0,0,1,0};
  int[4] s3 = {1,0,1,0};
  int[4] s4 = {0,1,0,0};
  int[4] s5 = {1,1,0,1};
  int[4] s6 = {0,1,0,1};
  int[4] s7 = {1,0,0,1};
  int[4] s8 = {0,0,0,1};
  int[4] s9 = {1,1,0,0};
  int[4] s10 = {1,0,0,0};
  int[4] s11 = {1,0,1,1};
  int[4] s12 = {0,0,1,1};
  int[4] s13 = {0,1,1,1};
  int[4] _out_s6 = {0,0,0,0};
  missState(s0, _out_s6);
  assert (_out_s6 == s1); //Assert at mru4.sk:22 (0)
  int[4] _out_s8 = {0,0,0,0};
  missState(s1, _out_s8);
  assert (_out_s8 == s2); //Assert at mru4.sk:23 (0)
  int[4] _out_s10 = {0,0,0,0};
  missState(s2, _out_s10);
  assert (_out_s10 == s5); //Assert at mru4.sk:24 (0)
  int[4] _out_s12 = {0,0,0,0};
  missState(s3, _out_s12);
  assert (_out_s12 == s2); //Assert at mru4.sk:25 (0)
  int[4] _out_s14 = {0,0,0,0};
  missState(s4, _out_s14);
  assert (_out_s14 == s11); //Assert at mru4.sk:26 (0)
  int[4] _out_s16 = {0,0,0,0};
  missState(s5, _out_s16);
  assert (_out_s16 == s6); //Assert at mru4.sk:27 (0)
  int[4] _out_s18 = {0,0,0,0};
  missState(s6, _out_s18);
  assert (_out_s18 == s8); //Assert at mru4.sk:28 (0)
  int[4] _out_s20 = {0,0,0,0};
  missState(s7, _out_s20);
  assert (_out_s20 == s8); //Assert at mru4.sk:29 (0)
  int[4] _out_s22 = {0,0,0,0};
  missState(s8, _out_s22);
  assert (_out_s22 == s0); //Assert at mru4.sk:30 (0)
  int[4] _out_s24 = {0,0,0,0};
  missState(s9, _out_s24);
  assert (_out_s24 == s4); //Assert at mru4.sk:31 (0)
  int[4] _out_s26 = {0,0,0,0};
  missState(s10, _out_s26);
  assert (_out_s26 == s13); //Assert at mru4.sk:32 (0)
  int[4] _out_s28 = {0,0,0,0};
  missState(s11, _out_s28);
  assert (_out_s28 == s12); //Assert at mru4.sk:33 (0)
  int[4] _out_s30 = {0,0,0,0};
  missState(s12, _out_s30);
  assert (_out_s30 == s8); //Assert at mru4.sk:34 (0)
  int[4] _out_s32 = {0,0,0,0};
  missState(s13, _out_s32);
  assert (_out_s32 == s12); //Assert at mru4.sk:35 (0)
  int _out_s34 = 0;
  missIdx(s0, _out_s34);
  assert (_out_s34 == 0); //Assert at mru4.sk:38 (0)
  int _out_s36 = 0;
  missIdx(s1, _out_s36);
  assert (_out_s36 == 1); //Assert at mru4.sk:39 (0)
  int _out_s38 = 0;
  missIdx(s2, _out_s38);
  assert (_out_s38 == 2); //Assert at mru4.sk:40 (0)
  int _out_s40 = 0;
  missIdx(s3, _out_s40);
  assert (_out_s40 == 0); //Assert at mru4.sk:41 (0)
  int _out_s42 = 0;
  missIdx(s4, _out_s42);
  assert (_out_s42 == 1); //Assert at mru4.sk:42 (0)
  int _out_s44 = 0;
  missIdx(s5, _out_s44);
  assert (_out_s44 == 0); //Assert at mru4.sk:43 (0)
  int _out_s46 = 0;
  missIdx(s6, _out_s46);
  assert (_out_s46 == 1); //Assert at mru4.sk:44 (0)
  int _out_s48 = 0;
  missIdx(s7, _out_s48);
  assert (_out_s48 == 0); //Assert at mru4.sk:45 (0)
  int _out_s50 = 0;
  missIdx(s8, _out_s50);
  assert (_out_s50 == 3); //Assert at mru4.sk:46 (0)
  int _out_s52 = 0;
  missIdx(s9, _out_s52);
  assert (_out_s52 == 0); //Assert at mru4.sk:47 (0)
  int _out_s54 = 0;
  missIdx(s10, _out_s54);
  assert (_out_s54 == 0); //Assert at mru4.sk:48 (0)
  int _out_s56 = 0;
  missIdx(s11, _out_s56);
  assert (_out_s56 == 0); //Assert at mru4.sk:49 (0)
  int _out_s58 = 0;
  missIdx(s12, _out_s58);
  assert (_out_s58 == 2); //Assert at mru4.sk:50 (0)
  int _out_s60 = 0;
  missIdx(s13, _out_s60);
  assert (_out_s60 == 1); //Assert at mru4.sk:51 (0)
  int[4] _out_s62 = {0,0,0,0};
  hitState(s0, 0, _out_s62);
  assert (_out_s62 == s1); //Assert at mru4.sk:54 (0)
  int[4] _out_s64 = {0,0,0,0};
  hitState(s0, 1, _out_s64);
  assert (_out_s64 == s3); //Assert at mru4.sk:55 (0)
  int[4] _out_s66 = {0,0,0,0};
  hitState(s0, 2, _out_s66);
  assert (_out_s66 == s9); //Assert at mru4.sk:56 (0)
  int[4] _out_s68 = {0,0,0,0};
  hitState(s0, 3, _out_s68);
  assert (_out_s68 == s0); //Assert at mru4.sk:57 (0)
  int[4] _out_s70 = {0,0,0,0};
  hitState(s1, 0, _out_s70);
  assert (_out_s70 == s1); //Assert at mru4.sk:58 (0)
  int[4] _out_s72 = {0,0,0,0};
  hitState(s1, 1, _out_s72);
  assert (_out_s72 == s2); //Assert at mru4.sk:59 (0)
  int[4] _out_s74 = {0,0,0,0};
  hitState(s1, 2, _out_s74);
  assert (_out_s74 == s4); //Assert at mru4.sk:60 (0)
  int[4] _out_s76 = {0,0,0,0};
  hitState(s1, 3, _out_s76);
  assert (_out_s76 == s1); //Assert at mru4.sk:61 (0)
  int[4] _out_s78 = {0,0,0,0};
  hitState(s2, 0, _out_s78);
  assert (_out_s78 == s2); //Assert at mru4.sk:62 (0)
  int[4] _out_s80 = {0,0,0,0};
  hitState(s2, 1, _out_s80);
  assert (_out_s80 == s2); //Assert at mru4.sk:63 (0)
  int[4] _out_s82 = {0,0,0,0};
  hitState(s2, 2, _out_s82);
  assert (_out_s82 == s5); //Assert at mru4.sk:64 (0)
  int[4] _out_s84 = {0,0,0,0};
  hitState(s2, 3, _out_s84);
  assert (_out_s84 == s2); //Assert at mru4.sk:65 (0)
  int[4] _out_s86 = {0,0,0,0};
  hitState(s3, 0, _out_s86);
  assert (_out_s86 == s2); //Assert at mru4.sk:66 (0)
  int[4] _out_s88 = {0,0,0,0};
  hitState(s3, 1, _out_s88);
  assert (_out_s88 == s3); //Assert at mru4.sk:67 (0)
  int[4] _out_s90 = {0,0,0,0};
  hitState(s3, 2, _out_s90);
  assert (_out_s90 == s10); //Assert at mru4.sk:68 (0)
  int[4] _out_s92 = {0,0,0,0};
  hitState(s3, 3, _out_s92);
  assert (_out_s92 == s3); //Assert at mru4.sk:69 (0)
  int[4] _out_s94 = {0,0,0,0};
  hitState(s4, 0, _out_s94);
  assert (_out_s94 == s4); //Assert at mru4.sk:70 (0)
  int[4] _out_s96 = {0,0,0,0};
  hitState(s4, 1, _out_s96);
  assert (_out_s96 == s11); //Assert at mru4.sk:71 (0)
  int[4] _out_s98 = {0,0,0,0};
  hitState(s4, 2, _out_s98);
  assert (_out_s98 == s4); //Assert at mru4.sk:72 (0)
  int[4] _out_s100 = {0,0,0,0};
  hitState(s4, 3, _out_s100);
  assert (_out_s100 == s4); //Assert at mru4.sk:73 (0)
  int[4] _out_s102 = {0,0,0,0};
  hitState(s5, 0, _out_s102);
  assert (_out_s102 == s6); //Assert at mru4.sk:74 (0)
  int[4] _out_s104 = {0,0,0,0};
  hitState(s5, 1, _out_s104);
  assert (_out_s104 == s7); //Assert at mru4.sk:75 (0)
  int[4] _out_s106 = {0,0,0,0};
  hitState(s5, 2, _out_s106);
  assert (_out_s106 == s5); //Assert at mru4.sk:76 (0)
  int[4] _out_s108 = {0,0,0,0};
  hitState(s5, 3, _out_s108);
  assert (_out_s108 == s9); //Assert at mru4.sk:77 (0)
  int[4] _out_s110 = {0,0,0,0};
  hitState(s6, 0, _out_s110);
  assert (_out_s110 == s6); //Assert at mru4.sk:78 (0)
  int[4] _out_s112 = {0,0,0,0};
  hitState(s6, 1, _out_s112);
  assert (_out_s112 == s8); //Assert at mru4.sk:79 (0)
  int[4] _out_s114 = {0,0,0,0};
  hitState(s6, 2, _out_s114);
  assert (_out_s114 == s6); //Assert at mru4.sk:80 (0)
  int[4] _out_s116 = {0,0,0,0};
  hitState(s6, 3, _out_s116);
  assert (_out_s116 == s4); //Assert at mru4.sk:81 (0)
  int[4] _out_s118 = {0,0,0,0};
  hitState(s7, 0, _out_s118);
  assert (_out_s118 == s8); //Assert at mru4.sk:82 (0)
  int[4] _out_s120 = {0,0,0,0};
  hitState(s7, 1, _out_s120);
  assert (_out_s120 == s7); //Assert at mru4.sk:83 (0)
  int[4] _out_s122 = {0,0,0,0};
  hitState(s7, 2, _out_s122);
  assert (_out_s122 == s7); //Assert at mru4.sk:84 (0)
  int[4] _out_s124 = {0,0,0,0};
  hitState(s7, 3, _out_s124);
  assert (_out_s124 == s10); //Assert at mru4.sk:85 (0)
  int[4] _out_s126 = {0,0,0,0};
  hitState(s8, 0, _out_s126);
  assert (_out_s126 == s8); //Assert at mru4.sk:86 (0)
  int[4] _out_s128 = {0,0,0,0};
  hitState(s8, 1, _out_s128);
  assert (_out_s128 == s8); //Assert at mru4.sk:87 (0)
  int[4] _out_s130 = {0,0,0,0};
  hitState(s8, 2, _out_s130);
  assert (_out_s130 == s8); //Assert at mru4.sk:88 (0)
  int[4] _out_s132 = {0,0,0,0};
  hitState(s8, 3, _out_s132);
  assert (_out_s132 == s0); //Assert at mru4.sk:89 (0)
  int[4] _out_s134 = {0,0,0,0};
  hitState(s9, 0, _out_s134);
  assert (_out_s134 == s4); //Assert at mru4.sk:90 (0)
  int[4] _out_s136 = {0,0,0,0};
  hitState(s9, 1, _out_s136);
  assert (_out_s136 == s10); //Assert at mru4.sk:91 (0)
  int[4] _out_s138 = {0,0,0,0};
  hitState(s9, 2, _out_s138);
  assert (_out_s138 == s9); //Assert at mru4.sk:92 (0)
  int[4] _out_s140 = {0,0,0,0};
  hitState(s9, 3, _out_s140);
  assert (_out_s140 == s9); //Assert at mru4.sk:93 (0)
  int[4] _out_s142 = {0,0,0,0};
  hitState(s10, 0, _out_s142);
  assert (_out_s142 == s13); //Assert at mru4.sk:94 (0)
  int[4] _out_s144 = {0,0,0,0};
  hitState(s10, 1, _out_s144);
  assert (_out_s144 == s10); //Assert at mru4.sk:95 (0)
  int[4] _out_s146 = {0,0,0,0};
  hitState(s10, 2, _out_s146);
  assert (_out_s146 == s10); //Assert at mru4.sk:96 (0)
  int[4] _out_s148 = {0,0,0,0};
  hitState(s10, 3, _out_s148);
  assert (_out_s148 == s10); //Assert at mru4.sk:97 (0)
  int[4] _out_s150 = {0,0,0,0};
  hitState(s11, 0, _out_s150);
  assert (_out_s150 == s12); //Assert at mru4.sk:98 (0)
  int[4] _out_s152 = {0,0,0,0};
  hitState(s11, 1, _out_s152);
  assert (_out_s152 == s11); //Assert at mru4.sk:99 (0)
  int[4] _out_s154 = {0,0,0,0};
  hitState(s11, 2, _out_s154);
  assert (_out_s154 == s7); //Assert at mru4.sk:100 (0)
  int[4] _out_s156 = {0,0,0,0};
  hitState(s11, 3, _out_s156);
  assert (_out_s156 == s3); //Assert at mru4.sk:101 (0)
  int[4] _out_s158 = {0,0,0,0};
  hitState(s12, 0, _out_s158);
  assert (_out_s158 == s12); //Assert at mru4.sk:102 (0)
  int[4] _out_s160 = {0,0,0,0};
  hitState(s12, 1, _out_s160);
  assert (_out_s160 == s12); //Assert at mru4.sk:103 (0)
  int[4] _out_s162 = {0,0,0,0};
  hitState(s12, 2, _out_s162);
  assert (_out_s162 == s8); //Assert at mru4.sk:104 (0)
  int[4] _out_s164 = {0,0,0,0};
  hitState(s12, 3, _out_s164);
  assert (_out_s164 == s2); //Assert at mru4.sk:105 (0)
  int[4] _out_s166 = {0,0,0,0};
  hitState(s13, 0, _out_s166);
  assert (_out_s166 == s13); //Assert at mru4.sk:106 (0)
  int[4] _out_s168 = {0,0,0,0};
  hitState(s13, 1, _out_s168);
  assert (_out_s168 == s12); //Assert at mru4.sk:107 (0)
  int[4] _out_s170 = {0,0,0,0};
  hitState(s13, 2, _out_s170);
  assert (_out_s170 == s6); //Assert at mru4.sk:108 (0)
  int[4] _out_s172 = {0,0,0,0};
  hitState(s13, 3, _out_s172);
  assert (_out_s172 == s1); //Assert at mru4.sk:109 (0)
}
/*extra.sk:6*/

void hitState (int[4] state, int pos, ref int[4] _out)/*extra.sk:6*/
{
  int[4] final = state;
  final[pos] = 0;
  int[4] _out_s182 = final;
  bit _has_out_ = 0;
  for(int j = 0; j < 4; j = j + 1)/*Canonical*/
  {
    if(_has_out_ == 0)/*extra.sk:99*/
    {
      for(int i = 0; i < 4; i = i + 1)/*Canonical*/
      {
        if(_has_out_ == 0)/*extra.sk:101*/
        {
          if((_out_s182[i]) == 1)/*extra.sk:101*/
          {
            _has_out_ = 1;
          }
        }
      }
    }
    if(_has_out_ == 0)/*extra.sk:106*/
    {
      for(int i_0 = 0; i_0 < 4; i_0 = i_0 + 1)/*Canonical*/
      {
        int _out_s203 = _out_s182[i_0];
        if((_out_s203 < 1) && (i_0 != pos))/*extra.sk:108*/
        {
          _out_s182[i_0] = 1;
        }
      }
    }
  }
  _out = _out_s182;
  return;
}
/*mru4.sk:4*/

void main__Wrapper ()  implements main__WrapperNospec/*mru4.sk:4*/
{
  _main();
}
/*mru4.sk:4*/

void main__WrapperNospec ()/*mru4.sk:4*/
{ }
/*extra.sk:16*/

void missIdx (int[4] state, ref int _out)/*extra.sk:16*/
{
  _out = 0;
  for(int i = 0; i < 4; i = i + 1)/*Canonical*/
  {
    if((state[i]) == 1)/*extra.sk:19*/
    {
      _out = i;
      return;
    }
  }
}
/*extra.sk:11*/

void missState (int[4] state, ref int[4] _out)/*extra.sk:11*/
{
  int[4] final = state;
  int replace_s221 = 0;
  missIdx(state, replace_s221);
  final[replace_s221] = 0;
  int[4] _out_s223 = final;
  bit _has_out_ = 0;
  for(int j = 0; j < 4; j = j + 1)/*Canonical*/
  {
    if(_has_out_ == 0)/*extra.sk:99*/
    {
      for(int i = 0; i < 4; i = i + 1)/*Canonical*/
      {
        if(_has_out_ == 0)/*extra.sk:101*/
        {
          if((_out_s223[i]) == 1)/*extra.sk:101*/
          {
            _has_out_ = 1;
          }
        }
      }
    }
    if(_has_out_ == 0)/*extra.sk:106*/
    {
      for(int i_0 = 0; i_0 < 4; i_0 = i_0 + 1)/*Canonical*/
      {
        if(replace_s221 != i_0)/*extra.sk:108*/
        {
          int val = _out_s223[i_0];
          _out_s223[i_0] = val + 1;
        }
      }
    }
  }
  _out = _out_s223;
  return;
}
/* END PACKAGE ANONYMOUS*/
[SKETCH] DONE
Total time = 39800

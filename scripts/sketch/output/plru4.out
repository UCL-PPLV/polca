SKETCH version 1.7.5
Benchmark = plru4.sk
/* BEGIN PACKAGE ANONYMOUS*/
/*plru4.sk:8*/

void _main ()/*plru4.sk:8*/
{
  bit[3] s0 = {0,0,0};
  bit[3] s1 = {1,1,0};
  bit[3] s2 = {0,1,1};
  bit[3] s3 = {1,1,1};
  bit[3] s4 = {0,1,0};
  bit[3] s5 = {0,0,1};
  bit[3] s6 = {1,0,0};
  bit[3] s7 = {1,0,1};
  bit[3] _out_s1 = {0,0,0};
  missState(s0, _out_s1);
  assert (_out_s1 == s1); //Assert at plru4.sk:20 (0)
  bit[3] _out_s3 = {0,0,0};
  missState(s1, _out_s3);
  assert (_out_s3 == s2); //Assert at plru4.sk:21 (0)
  bit[3] _out_s5 = {0,0,0};
  missState(s2, _out_s5);
  assert (_out_s5 == s7); //Assert at plru4.sk:22 (0)
  bit[3] _out_s7 = {0,0,0};
  missState(s3, _out_s7);
  assert (_out_s7 == s4); //Assert at plru4.sk:23 (0)
  bit[3] _out_s9 = {0,0,0};
  missState(s4, _out_s9);
  assert (_out_s9 == s6); //Assert at plru4.sk:24 (0)
  bit[3] _out_s11 = {0,0,0};
  missState(s5, _out_s11);
  assert (_out_s11 == s3); //Assert at plru4.sk:25 (0)
  bit[3] _out_s13 = {0,0,0};
  missState(s6, _out_s13);
  assert (_out_s13 == s5); //Assert at plru4.sk:26 (0)
  bit[3] _out_s15 = {0,0,0};
  missState(s7, _out_s15);
  assert (_out_s15 == s0); //Assert at plru4.sk:27 (0)
  int _out_s17 = 0;
  missIdx(s0, _out_s17);
  assert (_out_s17 == 0); //Assert at plru4.sk:30 (0)
  int _out_s19 = 0;
  missIdx(s1, _out_s19);
  assert (_out_s19 == 2); //Assert at plru4.sk:31 (0)
  int _out_s21 = 0;
  missIdx(s2, _out_s21);
  assert (_out_s21 == 1); //Assert at plru4.sk:32 (0)
  int _out_s23 = 0;
  missIdx(s3, _out_s23);
  assert (_out_s23 == 3); //Assert at plru4.sk:33 (0)
  int _out_s25 = 0;
  missIdx(s4, _out_s25);
  assert (_out_s25 == 1); //Assert at plru4.sk:34 (0)
  int _out_s27 = 0;
  missIdx(s5, _out_s27);
  assert (_out_s27 == 0); //Assert at plru4.sk:35 (0)
  int _out_s29 = 0;
  missIdx(s6, _out_s29);
  assert (_out_s29 == 2); //Assert at plru4.sk:36 (0)
  int _out_s31 = 0;
  missIdx(s7, _out_s31);
  assert (_out_s31 == 3); //Assert at plru4.sk:37 (0)
  bit[3] _out_s33 = {0,0,0};
  hitState(s0, 0, _out_s33);
  assert (_out_s33 == s1); //Assert at plru4.sk:40 (0)
  bit[3] _out_s35 = {0,0,0};
  hitState(s0, 1, _out_s35);
  assert (_out_s35 == s6); //Assert at plru4.sk:41 (0)
  bit[3] _out_s37 = {0,0,0};
  hitState(s0, 2, _out_s37);
  assert (_out_s37 == s5); //Assert at plru4.sk:42 (0)
  bit[3] _out_s39 = {0,0,0};
  hitState(s0, 3, _out_s39);
  assert (_out_s39 == s0); //Assert at plru4.sk:43 (0)
  bit[3] _out_s41 = {0,0,0};
  hitState(s1, 0, _out_s41);
  assert (_out_s41 == s1); //Assert at plru4.sk:44 (0)
  bit[3] _out_s43 = {0,0,0};
  hitState(s1, 1, _out_s43);
  assert (_out_s43 == s6); //Assert at plru4.sk:45 (0)
  bit[3] _out_s45 = {0,0,0};
  hitState(s1, 2, _out_s45);
  assert (_out_s45 == s2); //Assert at plru4.sk:46 (0)
  bit[3] _out_s47 = {0,0,0};
  hitState(s1, 3, _out_s47);
  assert (_out_s47 == s4); //Assert at plru4.sk:47 (0)
  bit[3] _out_s49 = {0,0,0};
  hitState(s2, 0, _out_s49);
  assert (_out_s49 == s3); //Assert at plru4.sk:48 (0)
  bit[3] _out_s51 = {0,0,0};
  hitState(s2, 1, _out_s51);
  assert (_out_s51 == s7); //Assert at plru4.sk:49 (0)
  bit[3] _out_s53 = {0,0,0};
  hitState(s2, 2, _out_s53);
  assert (_out_s53 == s2); //Assert at plru4.sk:50 (0)
  bit[3] _out_s55 = {0,0,0};
  hitState(s2, 3, _out_s55);
  assert (_out_s55 == s4); //Assert at plru4.sk:51 (0)
  bit[3] _out_s57 = {0,0,0};
  hitState(s3, 0, _out_s57);
  assert (_out_s57 == s3); //Assert at plru4.sk:52 (0)
  bit[3] _out_s59 = {0,0,0};
  hitState(s3, 1, _out_s59);
  assert (_out_s59 == s7); //Assert at plru4.sk:53 (0)
  bit[3] _out_s61 = {0,0,0};
  hitState(s3, 2, _out_s61);
  assert (_out_s61 == s2); //Assert at plru4.sk:54 (0)
  bit[3] _out_s63 = {0,0,0};
  hitState(s3, 3, _out_s63);
  assert (_out_s63 == s4); //Assert at plru4.sk:55 (0)
  bit[3] _out_s65 = {0,0,0};
  hitState(s4, 0, _out_s65);
  assert (_out_s65 == s1); //Assert at plru4.sk:56 (0)
  bit[3] _out_s67 = {0,0,0};
  hitState(s4, 1, _out_s67);
  assert (_out_s67 == s6); //Assert at plru4.sk:57 (0)
  bit[3] _out_s69 = {0,0,0};
  hitState(s4, 2, _out_s69);
  assert (_out_s69 == s2); //Assert at plru4.sk:58 (0)
  bit[3] _out_s71 = {0,0,0};
  hitState(s4, 3, _out_s71);
  assert (_out_s71 == s4); //Assert at plru4.sk:59 (0)
  bit[3] _out_s73 = {0,0,0};
  hitState(s5, 0, _out_s73);
  assert (_out_s73 == s3); //Assert at plru4.sk:60 (0)
  bit[3] _out_s75 = {0,0,0};
  hitState(s5, 1, _out_s75);
  assert (_out_s75 == s7); //Assert at plru4.sk:61 (0)
  bit[3] _out_s77 = {0,0,0};
  hitState(s5, 2, _out_s77);
  assert (_out_s77 == s5); //Assert at plru4.sk:62 (0)
  bit[3] _out_s79 = {0,0,0};
  hitState(s5, 3, _out_s79);
  assert (_out_s79 == s0); //Assert at plru4.sk:63 (0)
  bit[3] _out_s81 = {0,0,0};
  hitState(s6, 0, _out_s81);
  assert (_out_s81 == s1); //Assert at plru4.sk:64 (0)
  bit[3] _out_s83 = {0,0,0};
  hitState(s6, 1, _out_s83);
  assert (_out_s83 == s6); //Assert at plru4.sk:65 (0)
  bit[3] _out_s85 = {0,0,0};
  hitState(s6, 2, _out_s85);
  assert (_out_s85 == s5); //Assert at plru4.sk:66 (0)
  bit[3] _out_s87 = {0,0,0};
  hitState(s6, 3, _out_s87);
  assert (_out_s87 == s0); //Assert at plru4.sk:67 (0)
  bit[3] _out_s89 = {0,0,0};
  hitState(s7, 0, _out_s89);
  assert (_out_s89 == s3); //Assert at plru4.sk:68 (0)
  bit[3] _out_s91 = {0,0,0};
  hitState(s7, 1, _out_s91);
  assert (_out_s91 == s7); //Assert at plru4.sk:69 (0)
  bit[3] _out_s93 = {0,0,0};
  hitState(s7, 2, _out_s93);
  assert (_out_s93 == s5); //Assert at plru4.sk:70 (0)
  bit[3] _out_s95 = {0,0,0};
  hitState(s7, 3, _out_s95);
  assert (_out_s95 == s0); //Assert at plru4.sk:71 (0)
}
/*global.sk:4*/

void hitState (bit[3] state, int pos, ref bit[3] _out)/*global.sk:4*/
{
  int pos_0 = pos;
  bit[3] _out_s97 = state;
  int b = 0;
  for(int lvl = 2; lvl > 0; lvl = lvl - 1)
  {
    int step = 1;
    for(int i = 0; i < (lvl - 1); i = i + 1)/*Canonical*/
    {
      step = step * 2;
    }
    if(pos_0 < step)/*global.sk:42*/
    {
      _out_s97[b] = 1;
      b = b + 1;
    }
    else
    {
      _out_s97[b] = 0;
      b = b + step;
      pos_0 = pos_0 - step;
    }
  }
  _out = _out_s97;
  return;
}
/*plru4.sk:8*/

void main__Wrapper ()  implements main__WrapperNospec/*plru4.sk:8*/
{
  _main();
}
/*plru4.sk:8*/

void main__WrapperNospec ()/*plru4.sk:8*/
{ }
/*global.sk:14*/

void missIdx (bit[3] state, ref int _out)/*global.sk:14*/
{
  _out = 0;
  int b = 0;
  for(int lvl = 2; lvl > 0; lvl = lvl - 1)
  {
    int step = 1;
    for(int i = 0; i < (lvl - 1); i = i + 1)/*Canonical*/
    {
      step = step * 2;
    }
    if((state[b]) == 0)/*global.sk:23*/
    {
      b = b + 1;
    }
    else
    {
      b = b + step;
      _out = _out + step;
    }
  }
  return;
}
/*global.sk:9*/

void missState (bit[3] state, ref bit[3] _out)/*global.sk:9*/
{
  bit[3] _out_s99 = state;
  int replace_s101 = 0;
  missIdx(state, replace_s101);
  int replace;
  replace = replace_s101;
  int b = 0;
  for(int lvl = 2; lvl > 0; lvl = lvl - 1)
  {
    int step = 1;
    for(int i = 0; i < (lvl - 1); i = i + 1)/*Canonical*/
    {
      step = step * 2;
    }
    if(replace < step)/*global.sk:64*/
    {
      _out_s99[b] = 1;
      b = b + 1;
    }
    else
    {
      _out_s99[b] = 0;
      b = b + step;
      replace = replace - step;
    }
  }
  _out = _out_s99;
  return;
}
/* END PACKAGE ANONYMOUS*/
[SKETCH] DONE
Total time = 535

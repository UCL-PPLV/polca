void _main () {
  int[4] s0 = {3,2,1,0};
  int[4] s1 = {0,3,2,1};
  int[4] s2 = {1,0,3,2};
  int[4] s3 = {2,1,0,3};
  int[4] s4 = {3,0,2,1};
  int[4] s5 = {3,1,0,2};
  int[4] s6 = {3,2,0,1};
  int[4] s7 = {0,3,1,2};
  int[4] s8 = {1,3,0,2};
  int[4] s9 = {2,3,1,0};
  int[4] s10 = {0,2,1,3};
  int[4] s11 = {1,0,2,3};
  int[4] s12 = {1,2,0,3};
  int[4] s13 = {2,3,0,1};
  int[4] s14 = {2,0,1,3};
  int[4] s15 = {3,0,1,2};
  int[4] s16 = {0,1,2,3};
  int[4] s17 = {0,1,3,2};
  int[4] s18 = {1,3,2,0};
  int[4] s19 = {2,1,3,0};
  int[4] s20 = {0,2,3,1};
  int[4] s21 = {1,2,3,0};
  int[4] s22 = {3,1,2,0};
  int[4] s23 = {2,0,3,1};
}

// Promotion accessed element to age=0
// Increase all other younger ages
int[4] hitState (int[4] state, int pos) {
  int[4] out = state;
  out[pos] = 0;
  for(int i = 0; i < 4; i = i + 1) {
    if(i != pos && state[i] < state[pos]) {
      out[i] = state[i] + 1;
    }
  }
  return out;
}

// Replace element with age=3
int missIdx (int[4] state, ref int _out) {
  for(int i = 0; i < 4; i = i + 1) {
    if (state[i] > 2) {
      return i;
    }
  }
  return -1;
}

// Insert new value with age=0
// Increase all other younger ages
int[4] missState (int[4] state) {
  int[4] out = state;
  int replace = missIdx(state);
  out[replace ] = 0;
  for(int i = 0; i < 4; i = i + 1) {
    if (i != replace && state[replace] > state[i]) {
      out[i] = state[i] + 1;
    }
  }
  return out;
}

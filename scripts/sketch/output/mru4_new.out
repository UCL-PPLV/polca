SKETCH version 1.7.5
Benchmark = mru4.sk
/* BEGIN PACKAGE ANONYMOUS*/
/*mru4.sk:4*/

void _main ()/*mru4.sk:4*/
{
  int[4] s0 = {0,0,0,1};
  int[4] s1 = {1,0,0,1};
  int[4] s2 = {1,1,0,1};
  int[4] s3 = {0,1,0,1};
  int[4] s4 = {1,0,1,1};
  int[4] s5 = {0,0,1,0};
  int[4] s6 = {1,0,1,0};
  int[4] s7 = {0,1,1,0};
  int[4] s8 = {1,1,1,0};
  int[4] s9 = {0,0,1,1};
  int[4] s10 = {0,1,1,1};
  int[4] s11 = {0,1,0,0};
  int[4] s12 = {1,1,0,0};
  int[4] s13 = {1,0,0,0};
  int[4] _out_s5 = {0,0,0,0};
  missState(s0, _out_s5);
  assert (_out_s5 == s1); //Assert at mru4.sk:22 (0)
  int[4] _out_s7 = {0,0,0,0};
  missState(s1, _out_s7);
  assert (_out_s7 == s2); //Assert at mru4.sk:23 (0)
  int[4] _out_s9 = {0,0,0,0};
  missState(s2, _out_s9);
  assert (_out_s9 == s5); //Assert at mru4.sk:24 (0)
  int[4] _out_s11 = {0,0,0,0};
  missState(s3, _out_s11);
  assert (_out_s11 == s2); //Assert at mru4.sk:25 (0)
  int[4] _out_s13 = {0,0,0,0};
  missState(s4, _out_s13);
  assert (_out_s13 == s11); //Assert at mru4.sk:26 (0)
  int[4] _out_s15 = {0,0,0,0};
  missState(s5, _out_s15);
  assert (_out_s15 == s6); //Assert at mru4.sk:27 (0)
  int[4] _out_s17 = {0,0,0,0};
  missState(s6, _out_s17);
  assert (_out_s17 == s8); //Assert at mru4.sk:28 (0)
  int[4] _out_s19 = {0,0,0,0};
  missState(s7, _out_s19);
  assert (_out_s19 == s8); //Assert at mru4.sk:29 (0)
  int[4] _out_s21 = {0,0,0,0};
  missState(s8, _out_s21);
  assert (_out_s21 == s0); //Assert at mru4.sk:30 (0)
  int[4] _out_s23 = {0,0,0,0};
  missState(s9, _out_s23);
  assert (_out_s23 == s4); //Assert at mru4.sk:31 (0)
  int[4] _out_s25 = {0,0,0,0};
  missState(s10, _out_s25);
  assert (_out_s25 == s13); //Assert at mru4.sk:32 (0)
  int[4] _out_s27 = {0,0,0,0};
  missState(s11, _out_s27);
  assert (_out_s27 == s12); //Assert at mru4.sk:33 (0)
  int[4] _out_s29 = {0,0,0,0};
  missState(s12, _out_s29);
  assert (_out_s29 == s8); //Assert at mru4.sk:34 (0)
  int[4] _out_s31 = {0,0,0,0};
  missState(s13, _out_s31);
  assert (_out_s31 == s12); //Assert at mru4.sk:35 (0)
  int _out_s33 = 0;
  missIdx(s0, _out_s33);
  assert (_out_s33 == 0); //Assert at mru4.sk:38 (0)
  int _out_s35 = 0;
  missIdx(s1, _out_s35);
  assert (_out_s35 == 1); //Assert at mru4.sk:39 (0)
  int _out_s37 = 0;
  missIdx(s2, _out_s37);
  assert (_out_s37 == 2); //Assert at mru4.sk:40 (0)
  int _out_s39 = 0;
  missIdx(s3, _out_s39);
  assert (_out_s39 == 0); //Assert at mru4.sk:41 (0)
  int _out_s41 = 0;
  missIdx(s4, _out_s41);
  assert (_out_s41 == 1); //Assert at mru4.sk:42 (0)
  int _out_s43 = 0;
  missIdx(s5, _out_s43);
  assert (_out_s43 == 0); //Assert at mru4.sk:43 (0)
  int _out_s45 = 0;
  missIdx(s6, _out_s45);
  assert (_out_s45 == 1); //Assert at mru4.sk:44 (0)
  int _out_s47 = 0;
  missIdx(s7, _out_s47);
  assert (_out_s47 == 0); //Assert at mru4.sk:45 (0)
  int _out_s49 = 0;
  missIdx(s8, _out_s49);
  assert (_out_s49 == 3); //Assert at mru4.sk:46 (0)
  int _out_s51 = 0;
  missIdx(s9, _out_s51);
  assert (_out_s51 == 0); //Assert at mru4.sk:47 (0)
  int _out_s53 = 0;
  missIdx(s10, _out_s53);
  assert (_out_s53 == 0); //Assert at mru4.sk:48 (0)
  int _out_s55 = 0;
  missIdx(s11, _out_s55);
  assert (_out_s55 == 0); //Assert at mru4.sk:49 (0)
  int _out_s57 = 0;
  missIdx(s12, _out_s57);
  assert (_out_s57 == 2); //Assert at mru4.sk:50 (0)
  int _out_s59 = 0;
  missIdx(s13, _out_s59);
  assert (_out_s59 == 1); //Assert at mru4.sk:51 (0)
  int[4] _out_s61 = {0,0,0,0};
  hitState(s0, 0, _out_s61);
  assert (_out_s61 == s1); //Assert at mru4.sk:54 (0)
  int[4] _out_s63 = {0,0,0,0};
  hitState(s0, 1, _out_s63);
  assert (_out_s63 == s3); //Assert at mru4.sk:55 (0)
  int[4] _out_s65 = {0,0,0,0};
  hitState(s0, 2, _out_s65);
  assert (_out_s65 == s9); //Assert at mru4.sk:56 (0)
  int[4] _out_s67 = {0,0,0,0};
  hitState(s0, 3, _out_s67);
  assert (_out_s67 == s0); //Assert at mru4.sk:57 (0)
  int[4] _out_s69 = {0,0,0,0};
  hitState(s1, 0, _out_s69);
  assert (_out_s69 == s1); //Assert at mru4.sk:58 (0)
  int[4] _out_s71 = {0,0,0,0};
  hitState(s1, 1, _out_s71);
  assert (_out_s71 == s2); //Assert at mru4.sk:59 (0)
  int[4] _out_s73 = {0,0,0,0};
  hitState(s1, 2, _out_s73);
  assert (_out_s73 == s4); //Assert at mru4.sk:60 (0)
  int[4] _out_s75 = {0,0,0,0};
  hitState(s1, 3, _out_s75);
  assert (_out_s75 == s1); //Assert at mru4.sk:61 (0)
  int[4] _out_s77 = {0,0,0,0};
  hitState(s2, 0, _out_s77);
  assert (_out_s77 == s2); //Assert at mru4.sk:62 (0)
  int[4] _out_s79 = {0,0,0,0};
  hitState(s2, 1, _out_s79);
  assert (_out_s79 == s2); //Assert at mru4.sk:63 (0)
  int[4] _out_s81 = {0,0,0,0};
  hitState(s2, 2, _out_s81);
  assert (_out_s81 == s5); //Assert at mru4.sk:64 (0)
  int[4] _out_s83 = {0,0,0,0};
  hitState(s2, 3, _out_s83);
  assert (_out_s83 == s2); //Assert at mru4.sk:65 (0)
  int[4] _out_s85 = {0,0,0,0};
  hitState(s3, 0, _out_s85);
  assert (_out_s85 == s2); //Assert at mru4.sk:66 (0)
  int[4] _out_s87 = {0,0,0,0};
  hitState(s3, 1, _out_s87);
  assert (_out_s87 == s3); //Assert at mru4.sk:67 (0)
  int[4] _out_s89 = {0,0,0,0};
  hitState(s3, 2, _out_s89);
  assert (_out_s89 == s10); //Assert at mru4.sk:68 (0)
  int[4] _out_s91 = {0,0,0,0};
  hitState(s3, 3, _out_s91);
  assert (_out_s91 == s3); //Assert at mru4.sk:69 (0)
  int[4] _out_s93 = {0,0,0,0};
  hitState(s4, 0, _out_s93);
  assert (_out_s93 == s4); //Assert at mru4.sk:70 (0)
  int[4] _out_s95 = {0,0,0,0};
  hitState(s4, 1, _out_s95);
  assert (_out_s95 == s11); //Assert at mru4.sk:71 (0)
  int[4] _out_s97 = {0,0,0,0};
  hitState(s4, 2, _out_s97);
  assert (_out_s97 == s4); //Assert at mru4.sk:72 (0)
  int[4] _out_s99 = {0,0,0,0};
  hitState(s4, 3, _out_s99);
  assert (_out_s99 == s4); //Assert at mru4.sk:73 (0)
  int[4] _out_s101 = {0,0,0,0};
  hitState(s5, 0, _out_s101);
  assert (_out_s101 == s6); //Assert at mru4.sk:74 (0)
  int[4] _out_s103 = {0,0,0,0};
  hitState(s5, 1, _out_s103);
  assert (_out_s103 == s7); //Assert at mru4.sk:75 (0)
  int[4] _out_s105 = {0,0,0,0};
  hitState(s5, 2, _out_s105);
  assert (_out_s105 == s5); //Assert at mru4.sk:76 (0)
  int[4] _out_s107 = {0,0,0,0};
  hitState(s5, 3, _out_s107);
  assert (_out_s107 == s9); //Assert at mru4.sk:77 (0)
  int[4] _out_s109 = {0,0,0,0};
  hitState(s6, 0, _out_s109);
  assert (_out_s109 == s6); //Assert at mru4.sk:78 (0)
  int[4] _out_s111 = {0,0,0,0};
  hitState(s6, 1, _out_s111);
  assert (_out_s111 == s8); //Assert at mru4.sk:79 (0)
  int[4] _out_s113 = {0,0,0,0};
  hitState(s6, 2, _out_s113);
  assert (_out_s113 == s6); //Assert at mru4.sk:80 (0)
  int[4] _out_s115 = {0,0,0,0};
  hitState(s6, 3, _out_s115);
  assert (_out_s115 == s4); //Assert at mru4.sk:81 (0)
  int[4] _out_s117 = {0,0,0,0};
  hitState(s7, 0, _out_s117);
  assert (_out_s117 == s8); //Assert at mru4.sk:82 (0)
  int[4] _out_s119 = {0,0,0,0};
  hitState(s7, 1, _out_s119);
  assert (_out_s119 == s7); //Assert at mru4.sk:83 (0)
  int[4] _out_s121 = {0,0,0,0};
  hitState(s7, 2, _out_s121);
  assert (_out_s121 == s7); //Assert at mru4.sk:84 (0)
  int[4] _out_s123 = {0,0,0,0};
  hitState(s7, 3, _out_s123);
  assert (_out_s123 == s10); //Assert at mru4.sk:85 (0)
  int[4] _out_s125 = {0,0,0,0};
  hitState(s8, 0, _out_s125);
  assert (_out_s125 == s8); //Assert at mru4.sk:86 (0)
  int[4] _out_s127 = {0,0,0,0};
  hitState(s8, 1, _out_s127);
  assert (_out_s127 == s8); //Assert at mru4.sk:87 (0)
  int[4] _out_s129 = {0,0,0,0};
  hitState(s8, 2, _out_s129);
  assert (_out_s129 == s8); //Assert at mru4.sk:88 (0)
  int[4] _out_s131 = {0,0,0,0};
  hitState(s8, 3, _out_s131);
  assert (_out_s131 == s0); //Assert at mru4.sk:89 (0)
  int[4] _out_s133 = {0,0,0,0};
  hitState(s9, 0, _out_s133);
  assert (_out_s133 == s4); //Assert at mru4.sk:90 (0)
  int[4] _out_s135 = {0,0,0,0};
  hitState(s9, 1, _out_s135);
  assert (_out_s135 == s10); //Assert at mru4.sk:91 (0)
  int[4] _out_s137 = {0,0,0,0};
  hitState(s9, 2, _out_s137);
  assert (_out_s137 == s9); //Assert at mru4.sk:92 (0)
  int[4] _out_s139 = {0,0,0,0};
  hitState(s9, 3, _out_s139);
  assert (_out_s139 == s9); //Assert at mru4.sk:93 (0)
  int[4] _out_s141 = {0,0,0,0};
  hitState(s10, 0, _out_s141);
  assert (_out_s141 == s13); //Assert at mru4.sk:94 (0)
  int[4] _out_s143 = {0,0,0,0};
  hitState(s10, 1, _out_s143);
  assert (_out_s143 == s10); //Assert at mru4.sk:95 (0)
  int[4] _out_s145 = {0,0,0,0};
  hitState(s10, 2, _out_s145);
  assert (_out_s145 == s10); //Assert at mru4.sk:96 (0)
  int[4] _out_s147 = {0,0,0,0};
  hitState(s10, 3, _out_s147);
  assert (_out_s147 == s10); //Assert at mru4.sk:97 (0)
  int[4] _out_s149 = {0,0,0,0};
  hitState(s11, 0, _out_s149);
  assert (_out_s149 == s12); //Assert at mru4.sk:98 (0)
  int[4] _out_s151 = {0,0,0,0};
  hitState(s11, 1, _out_s151);
  assert (_out_s151 == s11); //Assert at mru4.sk:99 (0)
  int[4] _out_s153 = {0,0,0,0};
  hitState(s11, 2, _out_s153);
  assert (_out_s153 == s7); //Assert at mru4.sk:100 (0)
  int[4] _out_s155 = {0,0,0,0};
  hitState(s11, 3, _out_s155);
  assert (_out_s155 == s3); //Assert at mru4.sk:101 (0)
  int[4] _out_s157 = {0,0,0,0};
  hitState(s12, 0, _out_s157);
  assert (_out_s157 == s12); //Assert at mru4.sk:102 (0)
  int[4] _out_s159 = {0,0,0,0};
  hitState(s12, 1, _out_s159);
  assert (_out_s159 == s12); //Assert at mru4.sk:103 (0)
  int[4] _out_s161 = {0,0,0,0};
  hitState(s12, 2, _out_s161);
  assert (_out_s161 == s8); //Assert at mru4.sk:104 (0)
  int[4] _out_s163 = {0,0,0,0};
  hitState(s12, 3, _out_s163);
  assert (_out_s163 == s2); //Assert at mru4.sk:105 (0)
  int[4] _out_s165 = {0,0,0,0};
  hitState(s13, 0, _out_s165);
  assert (_out_s165 == s13); //Assert at mru4.sk:106 (0)
  int[4] _out_s167 = {0,0,0,0};
  hitState(s13, 1, _out_s167);
  assert (_out_s167 == s12); //Assert at mru4.sk:107 (0)
  int[4] _out_s169 = {0,0,0,0};
  hitState(s13, 2, _out_s169);
  assert (_out_s169 == s6); //Assert at mru4.sk:108 (0)
  int[4] _out_s171 = {0,0,0,0};
  hitState(s13, 3, _out_s171);
  assert (_out_s171 == s1); //Assert at mru4.sk:109 (0)
}
/*extra.sk:7*/

void hitState (int[4] state, int pos, ref int[4] _out)/*extra.sk:7*/
{
  int[4] ret = state;
  int _out_s210 = state[pos];
  if(1 > _out_s210)/*extra.sk:53*/
  {
    ret[pos] = 1;
  }
  int[4] _out_s183 = ret;
  bit _has_out_ = 0;
  for(int j = 0; j < 4; j = j + 1)/*Canonical*/
  {
    if(_has_out_ == 0)/*extra.sk:111*/
    {
      for(int i = 0; i < 4; i = i + 1)/*Canonical*/
      {
        if(_has_out_ == 0)/*extra.sk:114*/
        {
          if((_out_s183[i]) == 0)/*extra.sk:114*/
          {
            _has_out_ = 1;
          }
        }
      }
    }
    if(_has_out_ == 0)/*extra.sk:119*/
    {
      for(int i_0 = 0; i_0 < 4; i_0 = i_0 + 1)/*Canonical*/
      {
        if(i_0 != pos)/*extra.sk:121*/
        {
          _out_s183[i_0] = 0;
        }
      }
    }
  }
  _out = _out_s183;
  return;
}
/*mru4.sk:4*/

void main__Wrapper ()  implements main__WrapperNospec/*mru4.sk:4*/
{
  _main();
}
/*mru4.sk:4*/

void main__WrapperNospec ()/*mru4.sk:4*/
{ }
/*extra.sk:16*/

void missIdx (int[4] state, ref int _out)/*extra.sk:16*/
{
  bit _has_out_ = 0;
  int _out_s216 = 0;
  for(int i = 0; i < 4; i = i + 1)/*Canonical*/
  {
    bit _out_s218 = 0;
    if(_has_out_ == 0)/*extra.sk:79*/
    {
      int _out_s194 = state[i];
      _out_s218 = _out_s194 == 0;
    }
    if(_has_out_ == 0)/*extra.sk:79*/
    {
      if(_out_s218)/*extra.sk:79*/
      {
        _out_s216 = i;
        _has_out_ = 1;
      }
    }
  }
  if(_has_out_ == 0)/*extra.sk:87*/
  {
    _out_s216 = 0;
  }
  _out = _out_s216;
  return;
}
/*extra.sk:11*/

void missState (int[4] state, ref int[4] _out)/*extra.sk:11*/
{
  int replace_s220 = 0;
  missIdx(state, replace_s220);
  int[4] _out_s222 = state;
  _out_s222[replace_s220] = 1;
  int[4] ret_s224 = _out_s222;
  bit _has_out_ = 0;
  for(int j = 0; j < 4; j = j + 1)/*Canonical*/
  {
    if(_has_out_ == 0)/*extra.sk:111*/
    {
      for(int i = 0; i < 4; i = i + 1)/*Canonical*/
      {
        if(_has_out_ == 0)/*extra.sk:114*/
        {
          if((ret_s224[i]) == 0)/*extra.sk:114*/
          {
            _has_out_ = 1;
          }
        }
      }
    }
    if(_has_out_ == 0)/*extra.sk:119*/
    {
      for(int i_0 = 0; i_0 < 4; i_0 = i_0 + 1)/*Canonical*/
      {
        if(i_0 != replace_s220)/*extra.sk:121*/
        {
          ret_s224[i_0] = 0;
        }
      }
    }
  }
  _out = ret_s224;
  return;
}
/* END PACKAGE ANONYMOUS*/
[SKETCH] DONE
Total time = 1948

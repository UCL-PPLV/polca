pragma options "--be:nosim --beopt:simplifycex NOSIM --bnd-inbits 2 --bnd-cbits 2 --bnd-angelicbits 2 --bnd-unroll-amnt 1 --bnd-inline-amnt 2 --slv-seed 1337";
int ASSOC = 4;
include "templates/simple.sk";
harness void main() {
	// define states
	int[ASSOC] s0 = {??, ??, ??, ??};
	int[ASSOC] s1 = {??, ??, ??, ??};
	int[ASSOC] s2 = {??, ??, ??, ??};
	int[ASSOC] s3 = {??, ??, ??, ??};
	int[ASSOC] s4 = {??, ??, ??, ??};
	int[ASSOC] s5 = {??, ??, ??, ??};
	int[ASSOC] s6 = {??, ??, ??, ??};
	int[ASSOC] s7 = {??, ??, ??, ??};

	// miss transitions
	assert missState(s0) == s1;
	assert missState(s1) == s2;
	assert missState(s2) == s7;
	assert missState(s3) == s4;
	assert missState(s4) == s6;
	assert missState(s5) == s3;
	assert missState(s6) == s5;
	assert missState(s7) == s0;

	// miss index
	assert missIdx(s0) == 0;
	assert missIdx(s1) == 2;
	assert missIdx(s2) == 1;
	assert missIdx(s3) == 3;
	assert missIdx(s4) == 1;
	assert missIdx(s5) == 0;
	assert missIdx(s6) == 2;
	assert missIdx(s7) == 3;

	// hit state
	assert hitState(s0, 0) == s1;
	assert hitState(s0, 1) == s6;
	assert hitState(s0, 2) == s5;
	assert hitState(s0, 3) == s0;
	assert hitState(s1, 0) == s1;
	assert hitState(s1, 1) == s6;
	assert hitState(s1, 2) == s2;
	assert hitState(s1, 3) == s4;
	assert hitState(s2, 0) == s3;
	assert hitState(s2, 1) == s7;
	assert hitState(s2, 2) == s2;
	assert hitState(s2, 3) == s4;
	assert hitState(s3, 0) == s3;
	assert hitState(s3, 1) == s7;
	assert hitState(s3, 2) == s2;
	assert hitState(s3, 3) == s4;
	assert hitState(s4, 0) == s1;
	assert hitState(s4, 1) == s6;
	assert hitState(s4, 2) == s2;
	assert hitState(s4, 3) == s4;
	assert hitState(s5, 0) == s3;
	assert hitState(s5, 1) == s7;
	assert hitState(s5, 2) == s5;
	assert hitState(s5, 3) == s0;
	assert hitState(s6, 0) == s1;
	assert hitState(s6, 1) == s6;
	assert hitState(s6, 2) == s5;
	assert hitState(s6, 3) == s0;
	assert hitState(s7, 0) == s3;
	assert hitState(s7, 1) == s7;
	assert hitState(s7, 2) == s5;
	assert hitState(s7, 3) == s0;
}
